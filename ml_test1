#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun  3 08:51:34 2018

@author: xuetan
"""

import pandas as pd
import quandl, datetime
import math
import numpy as np
from sklearn import preprocessing, cross_validation,svm
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from matplotlib import style
import pickle
style.use('ggplot')


df = quandl.get ('WIKI/GOOGL')
df=df[['Adj. Open','Adj. High','Adj. Low','Adj. Close','Adj. Volume',]]
df['HL_PCT']=(df['Adj. High']-df['Adj. Low'])/df['Adj. Low']*100.0
df['PCT_change'] = (df['Adj. Close'] - df['Adj. Open']) / df['Adj. Open'] * 100.0

#
df = df[['Adj. Close' , 'HL_PCT' , 'PCT_change' , 'Adj. Volume']]
forecast_col = 'Adj. Close'
# fill na as outlier
df.fillna(-99999, inplace = True)
## math.ceil : round number bigger
forecast_out = int(math.ceil(0.01*len(df)))

#shift
df['label'] = df[forecast_col].shift(-forecast_out)
##drop label 
#df. drop can return new df
X= np.array(df.drop(['label'],1))
X=preprocessing.scale(X)
X=X[:-forecast_out]
X_lately=X[-forecast_out:]

df.dropna(inplace = True)
y = np.array(df['label'])

##train
X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=0.2)

clf = LinearRegression()
clf.fit(X_train, y_train)
###pickle
#save tranning model to save time
with open('linearregression.pickle','wb') as f:
    pickle.dump(clf,f)
pickle_in=open('linearregression.pickle','rb')
clf=pickle.load(pickle_in)

accuracy = clf.score(X_test, y_test)

forecast_set = clf.predict(X_lately)
print(forecast_set, accuracy, forecast_out)

#np.nan
#full of not a number data
df['Forecast']=np.nan

last_date= df.iloc[-1].name
last_unit=last_date.timestamp()
one_day=86400
next_unix=last_unit+one_day

for i in forecast_set:
    next_date=datetime.datetime.fromtimestamp(next_unix)
    next_unix +=one_day
    df.loc[next_date]=[np.nan for _ in range(len(df.columns)-1)]+[i]

df['Adj. Close'].plot()
df['Forecast'].plot()
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

